<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>libsystem_kernel.dylib`__exit (1 samples, 0.06%)</title><rect x="0.0000%" y="229" width="0.0600%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.06%)</title><rect x="0.0600%" y="197" width="0.0600%" height="15" fill="rgb(217,0,24)"/><text x="0.3100%" y="207.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.06%)</title><rect x="0.7794%" y="181" width="0.0600%" height="15" fill="rgb(221,193,54)"/><text x="1.0294%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (3 samples, 0.18%)</title><rect x="0.8393%" y="181" width="0.1799%" height="15" fill="rgb(248,212,6)"/><text x="1.0893%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_size (2 samples, 0.12%)</title><rect x="1.1990%" y="165" width="0.1199%" height="15" fill="rgb(208,68,35)"/><text x="1.4490%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (3 samples, 0.18%)</title><rect x="1.3189%" y="165" width="0.1799%" height="15" fill="rgb(232,128,0)"/><text x="1.5689%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (15 samples, 0.90%)</title><rect x="1.0192%" y="181" width="0.8993%" height="15" fill="rgb(207,160,47)"/><text x="1.2692%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (7 samples, 0.42%)</title><rect x="1.4988%" y="165" width="0.4197%" height="15" fill="rgb(228,23,34)"/><text x="1.7488%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (18 samples, 1.08%)</title><rect x="1.9185%" y="181" width="1.0791%" height="15" fill="rgb(218,30,26)"/><text x="2.1685%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (4 samples, 0.24%)</title><rect x="2.7578%" y="165" width="0.2398%" height="15" fill="rgb(220,122,19)"/><text x="3.0078%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 0.12%)</title><rect x="4.2566%" y="165" width="0.1199%" height="15" fill="rgb(250,228,42)"/><text x="4.5066%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (37 samples, 2.22%)</title><rect x="2.9976%" y="181" width="2.2182%" height="15" fill="rgb(240,193,28)"/><text x="3.2476%" y="191.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (14 samples, 0.84%)</title><rect x="4.3765%" y="165" width="0.8393%" height="15" fill="rgb(216,20,37)"/><text x="4.6265%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (5 samples, 0.30%)</title><rect x="4.9161%" y="149" width="0.2998%" height="15" fill="rgb(206,188,39)"/><text x="5.1661%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (9 samples, 0.54%)</title><rect x="5.2158%" y="181" width="0.5396%" height="15" fill="rgb(217,207,13)"/><text x="5.4658%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (2 samples, 0.12%)</title><rect x="5.7554%" y="181" width="0.1199%" height="15" fill="rgb(231,73,38)"/><text x="6.0054%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (1 samples, 0.06%)</title><rect x="5.8753%" y="181" width="0.0600%" height="15" fill="rgb(225,20,46)"/><text x="6.1253%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 0.06%)</title><rect x="5.9353%" y="181" width="0.0600%" height="15" fill="rgb(210,31,41)"/><text x="6.1853%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (2 samples, 0.12%)</title><rect x="5.9952%" y="181" width="0.1199%" height="15" fill="rgb(221,200,47)"/><text x="6.2452%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (2 samples, 0.12%)</title><rect x="6.1151%" y="181" width="0.1199%" height="15" fill="rgb(226,26,5)"/><text x="6.3651%" y="191.50"></text></g><g><title>thriftlike`DYLD-STUB$$malloc (1 samples, 0.06%)</title><rect x="6.2350%" y="181" width="0.0600%" height="15" fill="rgb(249,33,26)"/><text x="6.4850%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (5 samples, 0.30%)</title><rect x="7.1942%" y="165" width="0.2998%" height="15" fill="rgb(235,183,28)"/><text x="7.4442%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_size (4 samples, 0.24%)</title><rect x="7.7938%" y="149" width="0.2398%" height="15" fill="rgb(221,5,38)"/><text x="8.0438%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (12 samples, 0.72%)</title><rect x="7.4940%" y="165" width="0.7194%" height="15" fill="rgb(247,18,42)"/><text x="7.7440%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (3 samples, 0.18%)</title><rect x="8.0336%" y="149" width="0.1799%" height="15" fill="rgb(241,131,45)"/><text x="8.2836%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_small (24 samples, 1.44%)</title><rect x="8.2134%" y="165" width="1.4388%" height="15" fill="rgb(249,31,29)"/><text x="8.4634%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (4 samples, 0.24%)</title><rect x="9.4125%" y="149" width="0.2398%" height="15" fill="rgb(225,111,53)"/><text x="9.6625%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.06%)</title><rect x="9.6523%" y="165" width="0.0600%" height="15" fill="rgb(238,160,17)"/><text x="9.9023%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (11 samples, 0.66%)</title><rect x="9.7122%" y="165" width="0.6595%" height="15" fill="rgb(214,148,48)"/><text x="9.9622%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (2 samples, 0.12%)</title><rect x="10.3717%" y="165" width="0.1199%" height="15" fill="rgb(232,36,49)"/><text x="10.6217%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (4 samples, 0.24%)</title><rect x="11.8106%" y="149" width="0.2398%" height="15" fill="rgb(209,103,24)"/><text x="12.0606%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_size (1 samples, 0.06%)</title><rect x="12.7098%" y="133" width="0.0600%" height="15" fill="rgb(229,88,8)"/><text x="12.9598%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (3 samples, 0.18%)</title><rect x="12.7698%" y="133" width="0.1799%" height="15" fill="rgb(213,181,19)"/><text x="13.0198%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (18 samples, 1.08%)</title><rect x="12.0504%" y="149" width="1.0791%" height="15" fill="rgb(254,191,54)"/><text x="12.3004%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (3 samples, 0.18%)</title><rect x="12.9496%" y="133" width="0.1799%" height="15" fill="rgb(241,83,37)"/><text x="13.1996%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_small (30 samples, 1.80%)</title><rect x="13.1295%" y="149" width="1.7986%" height="15" fill="rgb(233,36,39)"/><text x="13.3795%" y="159.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.06%)</title><rect x="15.8873%" y="133" width="0.0600%" height="15" fill="rgb(226,3,54)"/><text x="16.1373%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (40 samples, 2.40%)</title><rect x="14.9281%" y="149" width="2.3981%" height="15" fill="rgb(245,192,40)"/><text x="15.1781%" y="159.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (23 samples, 1.38%)</title><rect x="15.9472%" y="133" width="1.3789%" height="15" fill="rgb(238,167,29)"/><text x="16.1972%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (9 samples, 0.54%)</title><rect x="16.7866%" y="117" width="0.5396%" height="15" fill="rgb(232,182,51)"/><text x="17.0366%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (12 samples, 0.72%)</title><rect x="17.3261%" y="149" width="0.7194%" height="15" fill="rgb(231,60,39)"/><text x="17.5761%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (2 samples, 0.12%)</title><rect x="18.0456%" y="149" width="0.1199%" height="15" fill="rgb(208,69,12)"/><text x="18.2956%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.06%)</title><rect x="18.1655%" y="149" width="0.0600%" height="15" fill="rgb(235,93,37)"/><text x="18.4155%" y="159.50"></text></g><g><title>thriftlike`DYLD-STUB$$free (1 samples, 0.06%)</title><rect x="18.2254%" y="149" width="0.0600%" height="15" fill="rgb(213,116,39)"/><text x="18.4754%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (6 samples, 0.36%)</title><rect x="20.9832%" y="133" width="0.3597%" height="15" fill="rgb(222,207,29)"/><text x="21.2332%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_size (2 samples, 0.12%)</title><rect x="22.2422%" y="117" width="0.1199%" height="15" fill="rgb(206,96,30)"/><text x="22.4922%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (3 samples, 0.18%)</title><rect x="22.3621%" y="117" width="0.1799%" height="15" fill="rgb(218,138,4)"/><text x="22.6121%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (36 samples, 2.16%)</title><rect x="21.3429%" y="133" width="2.1583%" height="15" fill="rgb(250,191,14)"/><text x="21.5929%" y="143.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_size (16 samples, 0.96%)</title><rect x="22.5420%" y="117" width="0.9592%" height="15" fill="rgb(239,60,40)"/><text x="22.7920%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_small (22 samples, 1.32%)</title><rect x="23.5012%" y="133" width="1.3189%" height="15" fill="rgb(206,27,48)"/><text x="23.7512%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (4 samples, 0.24%)</title><rect x="27.2182%" y="117" width="0.2398%" height="15" fill="rgb(225,35,8)"/><text x="27.4682%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.06%)</title><rect x="27.4580%" y="117" width="0.0600%" height="15" fill="rgb(250,213,24)"/><text x="27.7080%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (84 samples, 5.04%)</title><rect x="24.8201%" y="133" width="5.0360%" height="15" fill="rgb(247,123,22)"/><text x="25.0701%" y="143.50">libsys..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (39 samples, 2.34%)</title><rect x="27.5180%" y="117" width="2.3381%" height="15" fill="rgb(231,138,38)"/><text x="27.7680%" y="127.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (7 samples, 0.42%)</title><rect x="29.4365%" y="101" width="0.4197%" height="15" fill="rgb(231,145,46)"/><text x="29.6865%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (3 samples, 0.18%)</title><rect x="29.8561%" y="133" width="0.1799%" height="15" fill="rgb(251,118,11)"/><text x="30.1061%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.06%)</title><rect x="30.0360%" y="133" width="0.0600%" height="15" fill="rgb(217,147,25)"/><text x="30.2860%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.06%)</title><rect x="30.0959%" y="133" width="0.0600%" height="15" fill="rgb(247,81,37)"/><text x="30.3459%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (5 samples, 0.30%)</title><rect x="34.1727%" y="117" width="0.2998%" height="15" fill="rgb(209,12,38)"/><text x="34.4227%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.06%)</title><rect x="34.8921%" y="101" width="0.0600%" height="15" fill="rgb(227,1,9)"/><text x="35.1421%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (25 samples, 1.50%)</title><rect x="34.4724%" y="117" width="1.4988%" height="15" fill="rgb(248,47,43)"/><text x="34.7224%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (17 samples, 1.02%)</title><rect x="34.9520%" y="101" width="1.0192%" height="15" fill="rgb(221,10,30)"/><text x="35.2020%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (7 samples, 0.42%)</title><rect x="39.8082%" y="101" width="0.4197%" height="15" fill="rgb(210,229,1)"/><text x="40.0582%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.06%)</title><rect x="40.2278%" y="101" width="0.0600%" height="15" fill="rgb(222,148,37)"/><text x="40.4778%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (135 samples, 8.09%)</title><rect x="35.9712%" y="117" width="8.0935%" height="15" fill="rgb(234,67,33)"/><text x="36.2212%" y="127.50">libsystem_m..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (63 samples, 3.78%)</title><rect x="40.2878%" y="101" width="3.7770%" height="15" fill="rgb(247,98,35)"/><text x="40.5378%" y="111.50">libs..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (7 samples, 0.42%)</title><rect x="43.6451%" y="85" width="0.4197%" height="15" fill="rgb(247,138,52)"/><text x="43.8951%" y="95.50"></text></g><g><title>thriftlike`core::ptr::drop_in_place (656 samples, 39.33%)</title><rect x="6.2950%" y="181" width="39.3285%" height="15" fill="rgb(213,79,30)"/><text x="6.5450%" y="191.50">thriftlike`core::ptr::drop_in_place</text></g><g><title>thriftlike`core::ptr::drop_in_place (586 samples, 35.13%)</title><rect x="10.4916%" y="165" width="35.1319%" height="15" fill="rgb(246,177,23)"/><text x="10.7416%" y="175.50">thriftlike`core::ptr::drop_in_place</text></g><g><title>thriftlike`core::ptr::drop_in_place (456 samples, 27.34%)</title><rect x="18.2854%" y="149" width="27.3381%" height="15" fill="rgb(230,62,27)"/><text x="18.5354%" y="159.50">thriftlike`core::ptr::drop_in_place</text></g><g><title>thriftlike`core::ptr::drop_in_place (258 samples, 15.47%)</title><rect x="30.1559%" y="133" width="15.4676%" height="15" fill="rgb(216,154,8)"/><text x="30.4059%" y="143.50">thriftlike`core::ptr::dr..</text></g><g><title>thriftlike`core::ptr::drop_in_place (26 samples, 1.56%)</title><rect x="44.0647%" y="117" width="1.5588%" height="15" fill="rgb(244,35,45)"/><text x="44.3147%" y="127.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.12%)</title><rect x="46.5827%" y="165" width="0.1199%" height="15" fill="rgb(251,115,12)"/><text x="46.8327%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (5 samples, 0.30%)</title><rect x="46.7626%" y="133" width="0.2998%" height="15" fill="rgb(240,54,50)"/><text x="47.0126%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (25 samples, 1.50%)</title><rect x="47.2422%" y="117" width="1.4988%" height="15" fill="rgb(233,84,52)"/><text x="47.4922%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (51 samples, 3.06%)</title><rect x="47.0624%" y="133" width="3.0576%" height="15" fill="rgb(207,117,47)"/><text x="47.3124%" y="143.50">lib..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (23 samples, 1.38%)</title><rect x="48.7410%" y="117" width="1.3789%" height="15" fill="rgb(249,43,39)"/><text x="48.9910%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc (59 samples, 3.54%)</title><rect x="46.7026%" y="165" width="3.5372%" height="15" fill="rgb(209,38,44)"/><text x="46.9526%" y="175.50">lib..</text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (58 samples, 3.48%)</title><rect x="46.7626%" y="149" width="3.4772%" height="15" fill="rgb(236,212,23)"/><text x="47.0126%" y="159.50">lib..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.12%)</title><rect x="50.1199%" y="133" width="0.1199%" height="15" fill="rgb(242,79,21)"/><text x="50.3699%" y="143.50"></text></g><g><title>thriftlike`alloc::vec::Vec&lt;T&gt;::push (2 samples, 0.12%)</title><rect x="50.2398%" y="165" width="0.1199%" height="15" fill="rgb(211,96,35)"/><text x="50.4898%" y="175.50"></text></g><g><title>thriftlike`std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (39 samples, 2.34%)</title><rect x="50.3597%" y="165" width="2.3381%" height="15" fill="rgb(253,215,40)"/><text x="50.6097%" y="175.50">t..</text></g><g><title>thriftlike`thriftlike::read_bin (2 samples, 0.12%)</title><rect x="52.6978%" y="165" width="0.1199%" height="15" fill="rgb(211,81,21)"/><text x="52.9478%" y="175.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.06%)</title><rect x="53.8369%" y="149" width="0.0600%" height="15" fill="rgb(208,190,38)"/><text x="54.0869%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.06%)</title><rect x="54.1966%" y="133" width="0.0600%" height="15" fill="rgb(235,213,38)"/><text x="54.4466%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.12%)</title><rect x="54.4365%" y="117" width="0.1199%" height="15" fill="rgb(237,122,38)"/><text x="54.6865%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (4 samples, 0.24%)</title><rect x="56.1151%" y="85" width="0.2398%" height="15" fill="rgb(244,218,35)"/><text x="56.3651%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (3 samples, 0.18%)</title><rect x="56.3549%" y="85" width="0.1799%" height="15" fill="rgb(240,68,47)"/><text x="56.6049%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc (54 samples, 3.24%)</title><rect x="53.8969%" y="149" width="3.2374%" height="15" fill="rgb(210,16,53)"/><text x="54.1469%" y="159.50">lib..</text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (48 samples, 2.88%)</title><rect x="54.2566%" y="133" width="2.8777%" height="15" fill="rgb(235,124,12)"/><text x="54.5066%" y="143.50">li..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (43 samples, 2.58%)</title><rect x="54.5564%" y="117" width="2.5779%" height="15" fill="rgb(224,169,11)"/><text x="54.8064%" y="127.50">li..</text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (42 samples, 2.52%)</title><rect x="54.6163%" y="101" width="2.5180%" height="15" fill="rgb(250,166,2)"/><text x="54.8663%" y="111.50">li..</text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (10 samples, 0.60%)</title><rect x="56.5348%" y="85" width="0.5995%" height="15" fill="rgb(242,216,29)"/><text x="56.7848%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (3 samples, 0.18%)</title><rect x="56.9544%" y="69" width="0.1799%" height="15" fill="rgb(230,116,27)"/><text x="57.2044%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.06%)</title><rect x="57.1343%" y="149" width="0.0600%" height="15" fill="rgb(228,99,48)"/><text x="57.3843%" y="159.50"></text></g><g><title>thriftlike`DYLD-STUB$$malloc (1 samples, 0.06%)</title><rect x="57.1942%" y="149" width="0.0600%" height="15" fill="rgb(253,11,6)"/><text x="57.4442%" y="159.50"></text></g><g><title>thriftlike`alloc::vec::Vec&lt;T&gt;::push (1 samples, 0.06%)</title><rect x="57.2542%" y="149" width="0.0600%" height="15" fill="rgb(247,143,39)"/><text x="57.5042%" y="159.50"></text></g><g><title>thriftlike`std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (53 samples, 3.18%)</title><rect x="57.3141%" y="149" width="3.1775%" height="15" fill="rgb(236,97,10)"/><text x="57.5641%" y="159.50">thr..</text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (3 samples, 0.18%)</title><rect x="62.7098%" y="69" width="0.1799%" height="15" fill="rgb(233,208,19)"/><text x="62.9598%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.06%)</title><rect x="62.8897%" y="69" width="0.0600%" height="15" fill="rgb(216,164,2)"/><text x="63.1397%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`malloc (47 samples, 2.82%)</title><rect x="60.6115%" y="133" width="2.8177%" height="15" fill="rgb(220,129,5)"/><text x="60.8615%" y="143.50">li..</text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (47 samples, 2.82%)</title><rect x="60.6115%" y="117" width="2.8177%" height="15" fill="rgb(242,17,10)"/><text x="60.8615%" y="127.50">li..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (38 samples, 2.28%)</title><rect x="61.1511%" y="101" width="2.2782%" height="15" fill="rgb(242,107,0)"/><text x="61.4011%" y="111.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (36 samples, 2.16%)</title><rect x="61.2710%" y="85" width="2.1583%" height="15" fill="rgb(251,28,31)"/><text x="61.5210%" y="95.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (8 samples, 0.48%)</title><rect x="62.9496%" y="69" width="0.4796%" height="15" fill="rgb(233,223,10)"/><text x="63.1996%" y="79.50"></text></g><g><title>thriftlike`thriftlike::read_bin (50 samples, 3.00%)</title><rect x="60.4916%" y="149" width="2.9976%" height="15" fill="rgb(215,21,27)"/><text x="60.7416%" y="159.50">thr..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.06%)</title><rect x="63.4293%" y="133" width="0.0600%" height="15" fill="rgb(232,23,21)"/><text x="63.6793%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (4 samples, 0.24%)</title><rect x="67.5060%" y="101" width="0.2398%" height="15" fill="rgb(244,5,23)"/><text x="67.7560%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (10 samples, 0.60%)</title><rect x="69.5444%" y="69" width="0.5995%" height="15" fill="rgb(226,81,46)"/><text x="69.7944%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (1 samples, 0.06%)</title><rect x="70.1439%" y="69" width="0.0600%" height="15" fill="rgb(247,70,30)"/><text x="70.3939%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (46 samples, 2.76%)</title><rect x="68.0456%" y="85" width="2.7578%" height="15" fill="rgb(212,68,19)"/><text x="68.2956%" y="95.50">li..</text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (10 samples, 0.60%)</title><rect x="70.2038%" y="69" width="0.5995%" height="15" fill="rgb(240,187,13)"/><text x="70.4538%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (2 samples, 0.12%)</title><rect x="70.6835%" y="53" width="0.1199%" height="15" fill="rgb(223,113,26)"/><text x="70.9335%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (15 samples, 0.90%)</title><rect x="74.4005%" y="69" width="0.8993%" height="15" fill="rgb(206,192,2)"/><text x="74.6505%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 0.12%)</title><rect x="75.2998%" y="69" width="0.1199%" height="15" fill="rgb(241,108,4)"/><text x="75.5498%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (149 samples, 8.93%)</title><rect x="67.1463%" y="117" width="8.9329%" height="15" fill="rgb(247,173,49)"/><text x="67.3963%" y="127.50">libsystem_mal..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (139 samples, 8.33%)</title><rect x="67.7458%" y="101" width="8.3333%" height="15" fill="rgb(224,114,35)"/><text x="67.9958%" y="111.50">libsystem_ma..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (88 samples, 5.28%)</title><rect x="70.8034%" y="85" width="5.2758%" height="15" fill="rgb(245,159,27)"/><text x="71.0534%" y="95.50">libsys..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (11 samples, 0.66%)</title><rect x="75.4197%" y="69" width="0.6595%" height="15" fill="rgb(245,172,44)"/><text x="75.6697%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`malloc (155 samples, 9.29%)</title><rect x="66.9065%" y="133" width="9.2926%" height="15" fill="rgb(236,23,11)"/><text x="67.1565%" y="143.50">libsystem_mal..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.12%)</title><rect x="76.0791%" y="117" width="0.1199%" height="15" fill="rgb(205,117,38)"/><text x="76.3291%" y="127.50"></text></g><g><title>thriftlike`DYLD-STUB$$malloc (1 samples, 0.06%)</title><rect x="76.1990%" y="133" width="0.0600%" height="15" fill="rgb(237,72,25)"/><text x="76.4490%" y="143.50"></text></g><g><title>thriftlike`alloc::vec::Vec&lt;T&gt;::push (24 samples, 1.44%)</title><rect x="76.2590%" y="133" width="1.4388%" height="15" fill="rgb(244,70,9)"/><text x="76.5090%" y="143.50"></text></g><g><title>thriftlike`std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (135 samples, 8.09%)</title><rect x="77.6978%" y="133" width="8.0935%" height="15" fill="rgb(217,125,39)"/><text x="77.9478%" y="143.50">thriftlike`..</text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.06%)</title><rect x="86.1511%" y="101" width="0.0600%" height="15" fill="rgb(235,36,10)"/><text x="86.4011%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.12%)</title><rect x="86.3909%" y="85" width="0.1199%" height="15" fill="rgb(251,123,47)"/><text x="86.6409%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc (40 samples, 2.40%)</title><rect x="86.0911%" y="117" width="2.3981%" height="15" fill="rgb(221,13,13)"/><text x="86.3411%" y="127.50">li..</text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (38 samples, 2.28%)</title><rect x="86.2110%" y="101" width="2.2782%" height="15" fill="rgb(238,131,9)"/><text x="86.4610%" y="111.50">l..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (33 samples, 1.98%)</title><rect x="86.5108%" y="85" width="1.9784%" height="15" fill="rgb(211,50,8)"/><text x="86.7608%" y="95.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (32 samples, 1.92%)</title><rect x="86.5707%" y="69" width="1.9185%" height="15" fill="rgb(245,182,24)"/><text x="86.8207%" y="79.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (8 samples, 0.48%)</title><rect x="88.0096%" y="53" width="0.4796%" height="15" fill="rgb(242,14,37)"/><text x="88.2596%" y="63.50"></text></g><g><title>thriftlike`thriftlike::read_bin (46 samples, 2.76%)</title><rect x="85.7914%" y="133" width="2.7578%" height="15" fill="rgb(246,228,12)"/><text x="86.0414%" y="143.50">th..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.06%)</title><rect x="88.4892%" y="117" width="0.0600%" height="15" fill="rgb(213,55,15)"/><text x="88.7392%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1 samples, 0.06%)</title><rect x="89.5683%" y="69" width="0.0600%" height="15" fill="rgb(209,9,3)"/><text x="89.8183%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (33 samples, 1.98%)</title><rect x="89.3885%" y="101" width="1.9784%" height="15" fill="rgb(230,59,30)"/><text x="89.6385%" y="111.50">l..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (33 samples, 1.98%)</title><rect x="89.3885%" y="85" width="1.9784%" height="15" fill="rgb(209,121,21)"/><text x="89.6385%" y="95.50">l..</text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (29 samples, 1.74%)</title><rect x="89.6283%" y="69" width="1.7386%" height="15" fill="rgb(220,109,13)"/><text x="89.8783%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (3 samples, 0.18%)</title><rect x="91.1871%" y="53" width="0.1799%" height="15" fill="rgb(232,18,1)"/><text x="91.4371%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 0.06%)</title><rect x="91.3070%" y="37" width="0.0600%" height="15" fill="rgb(215,41,42)"/><text x="91.5570%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`malloc (36 samples, 2.16%)</title><rect x="89.3285%" y="117" width="2.1583%" height="15" fill="rgb(224,123,36)"/><text x="89.5785%" y="127.50">l..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.12%)</title><rect x="91.3669%" y="101" width="0.1199%" height="15" fill="rgb(240,125,3)"/><text x="91.6169%" y="111.50"></text></g><g><title>thriftlike`std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (42 samples, 2.52%)</title><rect x="91.4868%" y="117" width="2.5180%" height="15" fill="rgb(205,98,50)"/><text x="91.7368%" y="127.50">th..</text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.12%)</title><rect x="94.6643%" y="85" width="0.1199%" height="15" fill="rgb(205,185,37)"/><text x="94.9143%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (3 samples, 0.18%)</title><rect x="95.2038%" y="69" width="0.1799%" height="15" fill="rgb(238,207,15)"/><text x="95.4538%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.06%)</title><rect x="98.8609%" y="37" width="0.0600%" height="15" fill="rgb(213,199,42)"/><text x="99.1109%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (83 samples, 4.98%)</title><rect x="94.7842%" y="85" width="4.9760%" height="15" fill="rgb(235,201,11)"/><text x="95.0342%" y="95.50">libsys..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (73 samples, 4.38%)</title><rect x="95.3837%" y="69" width="4.3765%" height="15" fill="rgb(207,46,11)"/><text x="95.6337%" y="79.50">libsy..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (70 samples, 4.20%)</title><rect x="95.5635%" y="53" width="4.1966%" height="15" fill="rgb(241,35,35)"/><text x="95.8135%" y="63.50">libsy..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (14 samples, 0.84%)</title><rect x="98.9209%" y="37" width="0.8393%" height="15" fill="rgb(243,32,47)"/><text x="99.1709%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`malloc (90 samples, 5.40%)</title><rect x="94.4245%" y="101" width="5.3957%" height="15" fill="rgb(247,202,23)"/><text x="94.6745%" y="111.50">libsyst..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.06%)</title><rect x="99.7602%" y="85" width="0.0600%" height="15" fill="rgb(219,102,11)"/><text x="100.0102%" y="95.50"></text></g><g><title>all (1,668 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(243,110,44)"/><text x="0.2500%" y="287.50"></text></g><g><title>thriftlike`0x1 (1,668 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(222,74,54)"/><text x="0.2500%" y="271.50">thriftlike`0x1</text></g><g><title>libdyld.dylib`start (1,668 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(216,99,12)"/><text x="0.2500%" y="255.50">libdyld.dylib`start</text></g><g><title>thriftlike`main (1,667 samples, 99.94%)</title><rect x="0.0600%" y="229" width="99.9400%" height="15" fill="rgb(226,22,26)"/><text x="0.3100%" y="239.50">thriftlike`main</text></g><g><title>thriftlike`std::sys_common::backtrace::__rust_begin_short_backtrace (1,667 samples, 99.94%)</title><rect x="0.0600%" y="213" width="99.9400%" height="15" fill="rgb(217,163,10)"/><text x="0.3100%" y="223.50">thriftlike`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>thriftlike`thriftlike::main (1,666 samples, 99.88%)</title><rect x="0.1199%" y="197" width="99.8801%" height="15" fill="rgb(213,25,53)"/><text x="0.3699%" y="207.50">thriftlike`thriftlike::main</text></g><g><title>thriftlike`thriftlike::read_struct (907 samples, 54.38%)</title><rect x="45.6235%" y="181" width="54.3765%" height="15" fill="rgb(252,105,26)"/><text x="45.8735%" y="191.50">thriftlike`thriftlike::read_struct</text></g><g><title>thriftlike`thriftlike::read_struct (787 samples, 47.18%)</title><rect x="52.8177%" y="165" width="47.1823%" height="15" fill="rgb(220,39,43)"/><text x="53.0677%" y="175.50">thriftlike`thriftlike::read_struct</text></g><g><title>thriftlike`thriftlike::read_struct (609 samples, 36.51%)</title><rect x="63.4892%" y="149" width="36.5108%" height="15" fill="rgb(229,68,48)"/><text x="63.7392%" y="159.50">thriftlike`thriftlike::read_struct</text></g><g><title>thriftlike`thriftlike::read_struct (191 samples, 11.45%)</title><rect x="88.5492%" y="133" width="11.4508%" height="15" fill="rgb(252,8,32)"/><text x="88.7992%" y="143.50">thriftlike`thrift..</text></g><g><title>thriftlike`thriftlike::read_bin (100 samples, 6.00%)</title><rect x="94.0048%" y="117" width="5.9952%" height="15" fill="rgb(223,20,43)"/><text x="94.2548%" y="127.50">thriftli..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (3 samples, 0.18%)</title><rect x="99.8201%" y="101" width="0.1799%" height="15" fill="rgb(229,81,49)"/><text x="100.0701%" y="111.50"></text></g></svg></svg>