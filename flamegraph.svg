<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180"><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.05%)</title><rect x="0.0000%" y="213" width="0.0518%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="223.50"></text></g><g><title>thriftlike`DYLD-STUB$$free (1 samples, 0.05%)</title><rect x="0.0518%" y="213" width="0.0518%" height="15" fill="rgb(217,0,24)"/><text x="0.3018%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.05%)</title><rect x="0.5697%" y="197" width="0.0518%" height="15" fill="rgb(221,193,54)"/><text x="0.8197%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.05%)</title><rect x="0.6214%" y="197" width="0.0518%" height="15" fill="rgb(248,212,6)"/><text x="0.8714%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (4 samples, 0.21%)</title><rect x="1.0357%" y="181" width="0.2071%" height="15" fill="rgb(208,68,35)"/><text x="1.2857%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (26 samples, 1.35%)</title><rect x="0.6732%" y="197" width="1.3465%" height="15" fill="rgb(232,128,0)"/><text x="0.9232%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (15 samples, 0.78%)</title><rect x="1.2429%" y="181" width="0.7768%" height="15" fill="rgb(207,160,47)"/><text x="1.4929%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (6 samples, 0.31%)</title><rect x="3.9876%" y="181" width="0.3107%" height="15" fill="rgb(228,23,34)"/><text x="4.2376%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (72 samples, 3.73%)</title><rect x="2.0197%" y="197" width="3.7286%" height="15" fill="rgb(218,30,26)"/><text x="2.2697%" y="207.50">libs..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (28 samples, 1.45%)</title><rect x="4.2983%" y="181" width="1.4500%" height="15" fill="rgb(220,122,19)"/><text x="4.5483%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (5 samples, 0.26%)</title><rect x="5.4894%" y="165" width="0.2589%" height="15" fill="rgb(250,228,42)"/><text x="5.7394%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (1 samples, 0.05%)</title><rect x="5.7483%" y="197" width="0.0518%" height="15" fill="rgb(240,193,28)"/><text x="5.9983%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (2 samples, 0.10%)</title><rect x="5.8001%" y="197" width="0.1036%" height="15" fill="rgb(216,20,37)"/><text x="6.0501%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (2 samples, 0.10%)</title><rect x="6.3698%" y="181" width="0.1036%" height="15" fill="rgb(206,188,39)"/><text x="6.6198%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (2 samples, 0.10%)</title><rect x="6.9394%" y="165" width="0.1036%" height="15" fill="rgb(217,207,13)"/><text x="7.1894%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (21 samples, 1.09%)</title><rect x="6.4733%" y="181" width="1.0875%" height="15" fill="rgb(231,73,38)"/><text x="6.7233%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (10 samples, 0.52%)</title><rect x="7.0430%" y="165" width="0.5179%" height="15" fill="rgb(225,20,46)"/><text x="7.2930%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (4 samples, 0.21%)</title><rect x="8.1305%" y="165" width="0.2071%" height="15" fill="rgb(210,31,41)"/><text x="8.3805%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (22 samples, 1.14%)</title><rect x="7.5608%" y="181" width="1.1393%" height="15" fill="rgb(221,200,47)"/><text x="7.8108%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (7 samples, 0.36%)</title><rect x="8.3376%" y="165" width="0.3625%" height="15" fill="rgb(226,26,5)"/><text x="8.5876%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (1 samples, 0.05%)</title><rect x="8.7002%" y="181" width="0.0518%" height="15" fill="rgb(249,33,26)"/><text x="8.9502%" y="191.50"></text></g><g><title>thriftlike`DYLD-STUB$$free (1 samples, 0.05%)</title><rect x="8.7519%" y="181" width="0.0518%" height="15" fill="rgb(235,183,28)"/><text x="9.0019%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (5 samples, 0.26%)</title><rect x="9.1662%" y="165" width="0.2589%" height="15" fill="rgb(221,5,38)"/><text x="9.4162%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_size (4 samples, 0.21%)</title><rect x="9.5287%" y="149" width="0.2071%" height="15" fill="rgb(247,18,42)"/><text x="9.7787%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (4 samples, 0.21%)</title><rect x="9.7359%" y="149" width="0.2071%" height="15" fill="rgb(241,131,45)"/><text x="9.9859%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (21 samples, 1.09%)</title><rect x="9.4252%" y="165" width="1.0875%" height="15" fill="rgb(249,31,29)"/><text x="9.6752%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (11 samples, 0.57%)</title><rect x="9.9430%" y="149" width="0.5697%" height="15" fill="rgb(225,111,53)"/><text x="10.1930%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_small (13 samples, 0.67%)</title><rect x="10.5127%" y="165" width="0.6732%" height="15" fill="rgb(238,160,17)"/><text x="10.7627%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.05%)</title><rect x="11.8074%" y="149" width="0.0518%" height="15" fill="rgb(214,148,48)"/><text x="12.0574%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (21 samples, 1.09%)</title><rect x="11.1859%" y="165" width="1.0875%" height="15" fill="rgb(232,36,49)"/><text x="11.4359%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (8 samples, 0.41%)</title><rect x="11.8591%" y="149" width="0.4143%" height="15" fill="rgb(209,103,24)"/><text x="12.1091%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (2 samples, 0.10%)</title><rect x="12.1699%" y="133" width="0.1036%" height="15" fill="rgb(229,88,8)"/><text x="12.4199%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (2 samples, 0.10%)</title><rect x="12.2734%" y="165" width="0.1036%" height="15" fill="rgb(213,181,19)"/><text x="12.5234%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (5 samples, 0.26%)</title><rect x="14.0860%" y="149" width="0.2589%" height="15" fill="rgb(254,191,54)"/><text x="14.3360%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (3 samples, 0.16%)</title><rect x="15.0699%" y="133" width="0.1554%" height="15" fill="rgb(241,83,37)"/><text x="15.3199%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (35 samples, 1.81%)</title><rect x="14.3449%" y="149" width="1.8125%" height="15" fill="rgb(233,36,39)"/><text x="14.5949%" y="159.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_size (18 samples, 0.93%)</title><rect x="15.2253%" y="133" width="0.9322%" height="15" fill="rgb(226,3,54)"/><text x="15.4753%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (4 samples, 0.21%)</title><rect x="18.6432%" y="133" width="0.2071%" height="15" fill="rgb(245,192,40)"/><text x="18.8932%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (86 samples, 4.45%)</title><rect x="16.1574%" y="149" width="4.4537%" height="15" fill="rgb(238,167,29)"/><text x="16.4074%" y="159.50">libsy..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (34 samples, 1.76%)</title><rect x="18.8503%" y="133" width="1.7607%" height="15" fill="rgb(232,182,51)"/><text x="19.1003%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (6 samples, 0.31%)</title><rect x="20.3004%" y="117" width="0.3107%" height="15" fill="rgb(231,60,39)"/><text x="20.5504%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (1 samples, 0.05%)</title><rect x="20.6111%" y="149" width="0.0518%" height="15" fill="rgb(208,69,12)"/><text x="20.8611%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.05%)</title><rect x="20.6629%" y="149" width="0.0518%" height="15" fill="rgb(235,93,37)"/><text x="20.9129%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (10 samples, 0.52%)</title><rect x="23.9254%" y="133" width="0.5179%" height="15" fill="rgb(213,116,39)"/><text x="24.1754%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (5 samples, 0.26%)</title><rect x="25.4790%" y="117" width="0.2589%" height="15" fill="rgb(222,207,29)"/><text x="25.7290%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (41 samples, 2.12%)</title><rect x="24.4433%" y="133" width="2.1233%" height="15" fill="rgb(206,96,30)"/><text x="24.6933%" y="143.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_size (16 samples, 0.83%)</title><rect x="25.7380%" y="117" width="0.8286%" height="15" fill="rgb(218,138,4)"/><text x="25.9880%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (4 samples, 0.21%)</title><rect x="28.3791%" y="117" width="0.2071%" height="15" fill="rgb(250,191,14)"/><text x="28.6291%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (86 samples, 4.45%)</title><rect x="26.5665%" y="133" width="4.4537%" height="15" fill="rgb(239,60,40)"/><text x="26.8165%" y="143.50">libsy..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (47 samples, 2.43%)</title><rect x="28.5862%" y="117" width="2.4340%" height="15" fill="rgb(206,27,48)"/><text x="28.8362%" y="127.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.05%)</title><rect x="30.9684%" y="101" width="0.0518%" height="15" fill="rgb(225,35,8)"/><text x="31.2184%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (3 samples, 0.16%)</title><rect x="31.0202%" y="133" width="0.1554%" height="15" fill="rgb(250,213,24)"/><text x="31.2702%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.05%)</title><rect x="31.1756%" y="133" width="0.0518%" height="15" fill="rgb(247,123,22)"/><text x="31.4256%" y="143.50"></text></g><g><title>thriftlike`core::ptr::drop_in_place (521 samples, 26.98%)</title><rect x="5.9037%" y="197" width="26.9808%" height="15" fill="rgb(231,138,38)"/><text x="6.1537%" y="207.50">thriftlike`core::ptr::drop_in_place</text></g><g><title>thriftlike`core::ptr::drop_in_place (465 samples, 24.08%)</title><rect x="8.8037%" y="181" width="24.0808%" height="15" fill="rgb(231,145,46)"/><text x="9.0537%" y="191.50">thriftlike`core::ptr::drop_in_place</text></g><g><title>thriftlike`core::ptr::drop_in_place (396 samples, 20.51%)</title><rect x="12.3770%" y="165" width="20.5075%" height="15" fill="rgb(251,118,11)"/><text x="12.6270%" y="175.50">thriftlike`core::ptr::drop_in_pl..</text></g><g><title>thriftlike`core::ptr::drop_in_place (235 samples, 12.17%)</title><rect x="20.7147%" y="149" width="12.1699%" height="15" fill="rgb(217,147,25)"/><text x="20.9647%" y="159.50">thriftlike`core::p..</text></g><g><title>thriftlike`core::ptr::drop_in_place (32 samples, 1.66%)</title><rect x="31.2273%" y="133" width="1.6572%" height="15" fill="rgb(247,81,37)"/><text x="31.4773%" y="143.50"></text></g><g><title>thriftlike`std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (1 samples, 0.05%)</title><rect x="32.8845%" y="197" width="0.0518%" height="15" fill="rgb(209,12,38)"/><text x="33.1345%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.05%)</title><rect x="34.6970%" y="133" width="0.0518%" height="15" fill="rgb(227,1,9)"/><text x="34.9470%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (7 samples, 0.36%)</title><rect x="35.9917%" y="101" width="0.3625%" height="15" fill="rgb(248,47,43)"/><text x="36.2417%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.05%)</title><rect x="36.3542%" y="101" width="0.0518%" height="15" fill="rgb(221,10,30)"/><text x="36.6042%" y="111.50"></text></g><g><title>thriftlike`alloc::vec::Vec&lt;T&gt;::push (49 samples, 2.54%)</title><rect x="34.3345%" y="181" width="2.5375%" height="15" fill="rgb(210,229,1)"/><text x="34.5845%" y="191.50">th..</text></g><g><title>libsystem_malloc.dylib`malloc (44 samples, 2.28%)</title><rect x="34.5935%" y="165" width="2.2786%" height="15" fill="rgb(222,148,37)"/><text x="34.8435%" y="175.50">l..</text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (43 samples, 2.23%)</title><rect x="34.6453%" y="149" width="2.2268%" height="15" fill="rgb(234,67,33)"/><text x="34.8953%" y="159.50">l..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (41 samples, 2.12%)</title><rect x="34.7488%" y="133" width="2.1233%" height="15" fill="rgb(247,98,35)"/><text x="34.9988%" y="143.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (39 samples, 2.02%)</title><rect x="34.8524%" y="117" width="2.0197%" height="15" fill="rgb(247,138,52)"/><text x="35.1024%" y="127.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (9 samples, 0.47%)</title><rect x="36.4060%" y="101" width="0.4661%" height="15" fill="rgb(213,79,30)"/><text x="36.6560%" y="111.50"></text></g><g><title>thriftlike`hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (1 samples, 0.05%)</title><rect x="36.8721%" y="181" width="0.0518%" height="15" fill="rgb(246,177,23)"/><text x="37.1221%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.05%)</title><rect x="39.2543%" y="165" width="0.0518%" height="15" fill="rgb(230,62,27)"/><text x="39.5043%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.05%)</title><rect x="39.9793%" y="117" width="0.0518%" height="15" fill="rgb(216,154,8)"/><text x="40.2293%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (6 samples, 0.31%)</title><rect x="41.7918%" y="85" width="0.3107%" height="15" fill="rgb(244,35,45)"/><text x="42.0418%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc (56 samples, 2.90%)</title><rect x="39.8757%" y="149" width="2.9001%" height="15" fill="rgb(251,115,12)"/><text x="40.1257%" y="159.50">li..</text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (55 samples, 2.85%)</title><rect x="39.9275%" y="133" width="2.8483%" height="15" fill="rgb(240,54,50)"/><text x="40.1775%" y="143.50">li..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (53 samples, 2.74%)</title><rect x="40.0311%" y="117" width="2.7447%" height="15" fill="rgb(233,84,52)"/><text x="40.2811%" y="127.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (51 samples, 2.64%)</title><rect x="40.1346%" y="101" width="2.6411%" height="15" fill="rgb(207,117,47)"/><text x="40.3846%" y="111.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (13 samples, 0.67%)</title><rect x="42.1025%" y="85" width="0.6732%" height="15" fill="rgb(249,43,39)"/><text x="42.3525%" y="95.50"></text></g><g><title>thriftlike`std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (117 samples, 6.06%)</title><rect x="36.9239%" y="181" width="6.0590%" height="15" fill="rgb(209,38,44)"/><text x="37.1739%" y="191.50">thriftli..</text></g><g><title>thriftlike`hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (71 samples, 3.68%)</title><rect x="39.3061%" y="165" width="3.6769%" height="15" fill="rgb(236,212,23)"/><text x="39.5561%" y="175.50">thri..</text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (4 samples, 0.21%)</title><rect x="42.7758%" y="149" width="0.2071%" height="15" fill="rgb(242,79,21)"/><text x="43.0258%" y="159.50"></text></g><g><title>thriftlike`thriftlike::read_bin (2 samples, 0.10%)</title><rect x="42.9829%" y="181" width="0.1036%" height="15" fill="rgb(211,96,35)"/><text x="43.2329%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (3 samples, 0.16%)</title><rect x="43.9151%" y="165" width="0.1554%" height="15" fill="rgb(253,215,40)"/><text x="44.1651%" y="175.50"></text></g><g><title>thriftlike`DYLD-STUB$$memset (1 samples, 0.05%)</title><rect x="47.0741%" y="149" width="0.0518%" height="15" fill="rgb(211,81,21)"/><text x="47.3241%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.05%)</title><rect x="47.3848%" y="117" width="0.0518%" height="15" fill="rgb(208,190,38)"/><text x="47.6348%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.05%)</title><rect x="47.4883%" y="101" width="0.0518%" height="15" fill="rgb(235,213,38)"/><text x="47.7383%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.05%)</title><rect x="49.2491%" y="69" width="0.0518%" height="15" fill="rgb(237,122,38)"/><text x="49.4991%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`malloc (39 samples, 2.02%)</title><rect x="47.3848%" y="133" width="2.0197%" height="15" fill="rgb(244,218,35)"/><text x="47.6348%" y="143.50">l..</text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (38 samples, 1.97%)</title><rect x="47.4366%" y="117" width="1.9679%" height="15" fill="rgb(240,68,47)"/><text x="47.6866%" y="127.50">l..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (36 samples, 1.86%)</title><rect x="47.5401%" y="101" width="1.8643%" height="15" fill="rgb(210,16,53)"/><text x="47.7901%" y="111.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (34 samples, 1.76%)</title><rect x="47.6437%" y="85" width="1.7607%" height="15" fill="rgb(235,124,12)"/><text x="47.8937%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (2 samples, 0.10%)</title><rect x="49.3009%" y="69" width="0.1036%" height="15" fill="rgb(224,169,11)"/><text x="49.5509%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (3 samples, 0.16%)</title><rect x="49.4045%" y="133" width="0.1554%" height="15" fill="rgb(250,166,2)"/><text x="49.6545%" y="143.50"></text></g><g><title>thriftlike`std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (107 samples, 5.54%)</title><rect x="44.0704%" y="165" width="5.5412%" height="15" fill="rgb(242,216,29)"/><text x="44.3204%" y="175.50">thriftl..</text></g><g><title>thriftlike`hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (48 samples, 2.49%)</title><rect x="47.1258%" y="149" width="2.4858%" height="15" fill="rgb(230,116,27)"/><text x="47.3758%" y="159.50">th..</text></g><g><title>libsystem_platform.dylib`_platform_memset$VARIANT$Haswell (1 samples, 0.05%)</title><rect x="49.5598%" y="133" width="0.0518%" height="15" fill="rgb(228,99,48)"/><text x="49.8098%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (2 samples, 0.10%)</title><rect x="51.6313%" y="85" width="0.1036%" height="15" fill="rgb(253,11,6)"/><text x="51.8813%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.05%)</title><rect x="51.7349%" y="85" width="0.0518%" height="15" fill="rgb(247,143,39)"/><text x="51.9849%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc (52 samples, 2.69%)</title><rect x="49.7152%" y="149" width="2.6929%" height="15" fill="rgb(236,97,10)"/><text x="49.9652%" y="159.50">li..</text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (50 samples, 2.59%)</title><rect x="49.8187%" y="133" width="2.5893%" height="15" fill="rgb(233,208,19)"/><text x="50.0687%" y="143.50">li..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (49 samples, 2.54%)</title><rect x="49.8705%" y="117" width="2.5375%" height="15" fill="rgb(216,164,2)"/><text x="50.1205%" y="127.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (45 samples, 2.33%)</title><rect x="50.0777%" y="101" width="2.3304%" height="15" fill="rgb(220,129,5)"/><text x="50.3277%" y="111.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (12 samples, 0.62%)</title><rect x="51.7866%" y="85" width="0.6214%" height="15" fill="rgb(242,17,10)"/><text x="52.0366%" y="95.50"></text></g><g><title>thriftlike`thriftlike::read_bin (60 samples, 3.11%)</title><rect x="49.6116%" y="165" width="3.1072%" height="15" fill="rgb(242,107,0)"/><text x="49.8616%" y="175.50">thr..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (6 samples, 0.31%)</title><rect x="52.4081%" y="149" width="0.3107%" height="15" fill="rgb(251,28,31)"/><text x="52.6581%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.16%)</title><rect x="55.1528%" y="149" width="0.1554%" height="15" fill="rgb(233,223,10)"/><text x="55.4028%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.10%)</title><rect x="55.3081%" y="149" width="0.1036%" height="15" fill="rgb(215,21,27)"/><text x="55.5581%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (1 samples, 0.05%)</title><rect x="55.4117%" y="149" width="0.0518%" height="15" fill="rgb(232,23,21)"/><text x="55.6617%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (6 samples, 0.31%)</title><rect x="59.9171%" y="69" width="0.3107%" height="15" fill="rgb(244,5,23)"/><text x="60.1671%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (73 samples, 3.78%)</title><rect x="56.9135%" y="101" width="3.7804%" height="15" fill="rgb(226,81,46)"/><text x="57.1635%" y="111.50">libs..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (69 samples, 3.57%)</title><rect x="57.1207%" y="85" width="3.5733%" height="15" fill="rgb(247,70,30)"/><text x="57.3707%" y="95.50">libs..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (9 samples, 0.47%)</title><rect x="60.2279%" y="69" width="0.4661%" height="15" fill="rgb(212,68,19)"/><text x="60.4779%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (76 samples, 3.94%)</title><rect x="56.8099%" y="117" width="3.9358%" height="15" fill="rgb(240,187,13)"/><text x="57.0599%" y="127.50">libs..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.05%)</title><rect x="60.6939%" y="101" width="0.0518%" height="15" fill="rgb(223,113,26)"/><text x="60.9439%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc (78 samples, 4.04%)</title><rect x="56.7582%" y="133" width="4.0394%" height="15" fill="rgb(206,192,2)"/><text x="57.0082%" y="143.50">libs..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.05%)</title><rect x="60.7457%" y="117" width="0.0518%" height="15" fill="rgb(241,108,4)"/><text x="60.9957%" y="127.50"></text></g><g><title>thriftlike`alloc::vec::Vec&lt;T&gt;::push (104 samples, 5.39%)</title><rect x="55.4635%" y="149" width="5.3858%" height="15" fill="rgb(247,173,49)"/><text x="55.7135%" y="159.50">thriftl..</text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (1 samples, 0.05%)</title><rect x="60.7975%" y="133" width="0.0518%" height="15" fill="rgb(224,114,35)"/><text x="61.0475%" y="143.50"></text></g><g><title>thriftlike`hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (2 samples, 0.10%)</title><rect x="60.8493%" y="149" width="0.1036%" height="15" fill="rgb(245,159,27)"/><text x="61.0993%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.05%)</title><rect x="68.4619%" y="133" width="0.0518%" height="15" fill="rgb(245,172,44)"/><text x="68.7119%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (19 samples, 0.98%)</title><rect x="68.5137%" y="133" width="0.9839%" height="15" fill="rgb(236,23,11)"/><text x="68.7637%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (13 samples, 0.67%)</title><rect x="68.8244%" y="117" width="0.6732%" height="15" fill="rgb(205,117,38)"/><text x="69.0744%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (3 samples, 0.16%)</title><rect x="70.6888%" y="117" width="0.1554%" height="15" fill="rgb(237,72,25)"/><text x="70.9388%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (67 samples, 3.47%)</title><rect x="69.4977%" y="133" width="3.4697%" height="15" fill="rgb(244,70,9)"/><text x="69.7477%" y="143.50">lib..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (41 samples, 2.12%)</title><rect x="70.8441%" y="117" width="2.1233%" height="15" fill="rgb(217,125,39)"/><text x="71.0941%" y="127.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (7 samples, 0.36%)</title><rect x="72.6049%" y="101" width="0.3625%" height="15" fill="rgb(235,36,10)"/><text x="72.8549%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.05%)</title><rect x="72.9674%" y="133" width="0.0518%" height="15" fill="rgb(251,123,47)"/><text x="73.2174%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset$VARIANT$Haswell (1 samples, 0.05%)</title><rect x="73.0192%" y="133" width="0.0518%" height="15" fill="rgb(221,13,13)"/><text x="73.2692%" y="143.50"></text></g><g><title>thriftlike`DYLD-STUB$$malloc (2 samples, 0.10%)</title><rect x="73.0709%" y="133" width="0.1036%" height="15" fill="rgb(238,131,9)"/><text x="73.3209%" y="143.50"></text></g><g><title>thriftlike`DYLD-STUB$$memset (1 samples, 0.05%)</title><rect x="73.1745%" y="133" width="0.0518%" height="15" fill="rgb(211,50,8)"/><text x="73.4245%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (5 samples, 0.26%)</title><rect x="80.4247%" y="85" width="0.2589%" height="15" fill="rgb(245,182,24)"/><text x="80.6747%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (28 samples, 1.45%)</title><rect x="80.9943%" y="69" width="1.4500%" height="15" fill="rgb(242,14,37)"/><text x="81.2443%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (15 samples, 0.78%)</title><rect x="84.9819%" y="53" width="0.7768%" height="15" fill="rgb(246,228,12)"/><text x="85.2319%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (120 samples, 6.21%)</title><rect x="80.6836%" y="85" width="6.2144%" height="15" fill="rgb(213,55,15)"/><text x="80.9336%" y="95.50">libsyste..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (86 samples, 4.45%)</title><rect x="82.4443%" y="69" width="4.4537%" height="15" fill="rgb(209,9,3)"/><text x="82.6943%" y="79.50">libsy..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (22 samples, 1.14%)</title><rect x="85.7587%" y="53" width="1.1393%" height="15" fill="rgb(230,59,30)"/><text x="86.0087%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (135 samples, 6.99%)</title><rect x="79.9586%" y="101" width="6.9912%" height="15" fill="rgb(209,121,21)"/><text x="80.2086%" y="111.50">libsystem..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.05%)</title><rect x="86.8980%" y="85" width="0.0518%" height="15" fill="rgb(220,109,13)"/><text x="87.1480%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc (141 samples, 7.30%)</title><rect x="79.6996%" y="117" width="7.3019%" height="15" fill="rgb(232,18,1)"/><text x="79.9496%" y="127.50">libsystem_..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.05%)</title><rect x="86.9498%" y="101" width="0.0518%" height="15" fill="rgb(215,41,42)"/><text x="87.1998%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (2 samples, 0.10%)</title><rect x="87.0016%" y="117" width="0.1036%" height="15" fill="rgb(224,123,36)"/><text x="87.2516%" y="127.50"></text></g><g><title>thriftlike`std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (506 samples, 26.20%)</title><rect x="60.9529%" y="149" width="26.2040%" height="15" fill="rgb(240,125,3)"/><text x="61.2029%" y="159.50">thriftlike`std::collections::hash::map::Ha..</text></g><g><title>thriftlike`hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (269 samples, 13.93%)</title><rect x="73.2263%" y="133" width="13.9306%" height="15" fill="rgb(205,98,50)"/><text x="73.4763%" y="143.50">thriftlike`hashbrown:..</text></g><g><title>libsystem_platform.dylib`_platform_memset$VARIANT$Haswell (1 samples, 0.05%)</title><rect x="87.1051%" y="117" width="0.0518%" height="15" fill="rgb(205,185,37)"/><text x="87.3551%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.05%)</title><rect x="87.4676%" y="117" width="0.0518%" height="15" fill="rgb(238,207,15)"/><text x="87.7176%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.10%)</title><rect x="87.5712%" y="101" width="0.1036%" height="15" fill="rgb(213,199,42)"/><text x="87.8212%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc (38 samples, 1.97%)</title><rect x="87.4676%" y="133" width="1.9679%" height="15" fill="rgb(235,201,11)"/><text x="87.7176%" y="143.50">l..</text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (37 samples, 1.92%)</title><rect x="87.5194%" y="117" width="1.9161%" height="15" fill="rgb(207,46,11)"/><text x="87.7694%" y="127.50">l..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (34 samples, 1.76%)</title><rect x="87.6748%" y="101" width="1.7607%" height="15" fill="rgb(241,35,35)"/><text x="87.9248%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (31 samples, 1.61%)</title><rect x="87.8301%" y="85" width="1.6054%" height="15" fill="rgb(243,32,47)"/><text x="88.0801%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (15 samples, 0.78%)</title><rect x="88.6587%" y="69" width="0.7768%" height="15" fill="rgb(247,202,23)"/><text x="88.9087%" y="79.50"></text></g><g><title>thriftlike`thriftlike::read_bin (48 samples, 2.49%)</title><rect x="87.1569%" y="149" width="2.4858%" height="15" fill="rgb(219,102,11)"/><text x="87.4069%" y="159.50">th..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (4 samples, 0.21%)</title><rect x="89.4355%" y="133" width="0.2071%" height="15" fill="rgb(243,110,44)"/><text x="89.6855%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.05%)</title><rect x="90.4713%" y="133" width="0.0518%" height="15" fill="rgb(222,74,54)"/><text x="90.7213%" y="143.50"></text></g><g><title>thriftlike`DYLD-STUB$$malloc (1 samples, 0.05%)</title><rect x="90.5230%" y="133" width="0.0518%" height="15" fill="rgb(216,99,12)"/><text x="90.7730%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.10%)</title><rect x="92.8534%" y="69" width="0.1036%" height="15" fill="rgb(226,22,26)"/><text x="93.1034%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.05%)</title><rect x="93.0606%" y="53" width="0.0518%" height="15" fill="rgb(217,163,10)"/><text x="93.3106%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (3 samples, 0.16%)</title><rect x="94.4070%" y="37" width="0.1554%" height="15" fill="rgb(213,25,53)"/><text x="94.6570%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`malloc (40 samples, 2.07%)</title><rect x="92.6981%" y="101" width="2.0715%" height="15" fill="rgb(252,105,26)"/><text x="92.9481%" y="111.50">l..</text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (39 samples, 2.02%)</title><rect x="92.7499%" y="85" width="2.0197%" height="15" fill="rgb(220,39,43)"/><text x="92.9999%" y="95.50">l..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (35 samples, 1.81%)</title><rect x="92.9570%" y="69" width="1.8125%" height="15" fill="rgb(229,68,48)"/><text x="93.2070%" y="79.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (32 samples, 1.66%)</title><rect x="93.1124%" y="53" width="1.6572%" height="15" fill="rgb(252,8,32)"/><text x="93.3624%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (4 samples, 0.21%)</title><rect x="94.5624%" y="37" width="0.2071%" height="15" fill="rgb(223,20,43)"/><text x="94.8124%" y="47.50"></text></g><g><title>thriftlike`std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (82 samples, 4.25%)</title><rect x="90.5748%" y="133" width="4.2465%" height="15" fill="rgb(229,81,49)"/><text x="90.8248%" y="143.50">thrif..</text></g><g><title>thriftlike`hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (46 samples, 2.38%)</title><rect x="92.4392%" y="117" width="2.3822%" height="15" fill="rgb(236,28,36)"/><text x="92.6892%" y="127.50">th..</text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (1 samples, 0.05%)</title><rect x="94.7695%" y="101" width="0.0518%" height="15" fill="rgb(249,185,26)"/><text x="95.0195%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.10%)</title><rect x="95.4946%" y="85" width="0.1036%" height="15" fill="rgb(249,174,33)"/><text x="95.7446%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.05%)</title><rect x="95.7535%" y="69" width="0.0518%" height="15" fill="rgb(233,201,37)"/><text x="96.0035%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (80 samples, 4.14%)</title><rect x="95.5981%" y="85" width="4.1429%" height="15" fill="rgb(221,78,26)"/><text x="95.8481%" y="95.50">libsy..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (76 samples, 3.94%)</title><rect x="95.8053%" y="69" width="3.9358%" height="15" fill="rgb(250,127,30)"/><text x="96.0553%" y="79.50">libs..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (24 samples, 1.24%)</title><rect x="98.4982%" y="53" width="1.2429%" height="15" fill="rgb(230,49,44)"/><text x="98.7482%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`malloc (90 samples, 4.66%)</title><rect x="95.1321%" y="117" width="4.6608%" height="15" fill="rgb(229,67,23)"/><text x="95.3821%" y="127.50">libsy..</text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (87 samples, 4.51%)</title><rect x="95.2874%" y="101" width="4.5054%" height="15" fill="rgb(249,83,47)"/><text x="95.5374%" y="111.50">libsy..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.05%)</title><rect x="99.7411%" y="85" width="0.0518%" height="15" fill="rgb(215,43,3)"/><text x="99.9911%" y="95.50"></text></g><g><title>thriftlike`thriftlike::main (1,927 samples, 99.79%)</title><rect x="0.1036%" y="213" width="99.7929%" height="15" fill="rgb(238,154,13)"/><text x="0.3536%" y="223.50">thriftlike`thriftlike::main</text></g><g><title>thriftlike`thriftlike::read_struct (1,293 samples, 66.96%)</title><rect x="32.9363%" y="197" width="66.9601%" height="15" fill="rgb(219,56,2)"/><text x="33.1863%" y="207.50">thriftlike`thriftlike::read_struct</text></g><g><title>thriftlike`thriftlike::read_struct (1,097 samples, 56.81%)</title><rect x="43.0865%" y="181" width="56.8099%" height="15" fill="rgb(233,0,4)"/><text x="43.3365%" y="191.50">thriftlike`thriftlike::read_struct</text></g><g><title>thriftlike`thriftlike::read_struct (911 samples, 47.18%)</title><rect x="52.7188%" y="165" width="47.1776%" height="15" fill="rgb(235,30,7)"/><text x="52.9688%" y="175.50">thriftlike`thriftlike::read_struct</text></g><g><title>thriftlike`thriftlike::read_struct (198 samples, 10.25%)</title><rect x="89.6427%" y="149" width="10.2538%" height="15" fill="rgb(250,79,13)"/><text x="89.8927%" y="159.50">thriftlike`thri..</text></g><g><title>thriftlike`thriftlike::read_bin (98 samples, 5.08%)</title><rect x="94.8213%" y="133" width="5.0751%" height="15" fill="rgb(211,146,34)"/><text x="95.0713%" y="143.50">thrift..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (2 samples, 0.10%)</title><rect x="99.7929%" y="117" width="0.1036%" height="15" fill="rgb(228,22,38)"/><text x="100.0429%" y="127.50"></text></g><g><title>all (1,931 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(235,168,5)"/><text x="0.2500%" y="303.50"></text></g><g><title>thriftlike`0x1 (1,931 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(221,155,16)"/><text x="0.2500%" y="287.50">thriftlike`0x1</text></g><g><title>libdyld.dylib`start (1,931 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(215,215,53)"/><text x="0.2500%" y="271.50">libdyld.dylib`start</text></g><g><title>thriftlike`main (1,931 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(223,4,10)"/><text x="0.2500%" y="255.50">thriftlike`main</text></g><g><title>thriftlike`std::sys_common::backtrace::__rust_begin_short_backtrace (1,931 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(234,103,6)"/><text x="0.2500%" y="239.50">thriftlike`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>thriftlike`thriftlike::read_struct (2 samples, 0.10%)</title><rect x="99.8964%" y="213" width="0.1036%" height="15" fill="rgb(227,97,0)"/><text x="100.1464%" y="223.50"></text></g></svg></svg>